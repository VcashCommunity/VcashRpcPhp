<?php
require __DIR__ . '/vendor/autoload.php';
use Graze\GuzzleHttp\JsonRpc\Client;

// composer install

class VcashRpc {

    // General rpc caller
    private static function call_rpc($payload) {
        try {
            // Create the client
            $client = Client::factory('http://127.0.0.1:9195');
            // Create a request
            $request = $client->request(1, $payload->method, $payload->params);
            $response = $client->send($request);
            // JSON decode the line of data, get an associative array (option true)
            $data = json_decode($response->getBody(), true);
            return $data;
        } catch (RequestException $e) {
            die($e->getResponse()->getRpcErrorMessage());
        }
    }

    public static function rpc_getinfo() {
        // getinfo
        $payload = (object) ['method' => 'getinfo', 'params' => ['']];
        return VcashRpc::call_rpc($payload);
    }


    public static function rpc_getbalance() {
        # Get wallet balance
        $payload = (object) ['method' => 'getbalance', 'params' => ['']];
        return VcashRpc::call_rpc($payload);
    }


    public static function rpc_getnewaddress() {
        # Get new vcash address
        $payload = (object) ['method' => 'getnewaddress', 'params' => ['']];
        return VcashRpc::call_rpc($payload);
    }


    public static function rpc_listtransactions() {
        # listtransactions
        $payload = (object) ['method' => 'listtransactions', 'params' => ['']];
        return VcashRpc::call_rpc($payload);
    }


    public static function rpc_listreceivedbyaddress() {
        # listreceivedbyaddress 1: received with minimum 1 confirmations
        $confirm_number = 1;
        $payload = (object) ['method' => 'listreceivedbyaddress', 'params' => [$confirm_number]];
        return VcashRpc::call_rpc($payload);
    }


    public static function rpc_gettransaction($txid) {
        # gettransaction txid
        $payload = (object) ['method' => 'gettransaction', 'params' => [$txid]];
        return VcashRpc::call_rpc($payload);
    }

    // Get error src vcash file line 496 rpc_connection.cpp
    // 460: bool rpc_connection::parse_json_rpc_request
    // look at handle_json_rpc_request
    // json_getblockcount
    public static function rpc_getblockcount() {
        # getblockcount
        $payload = (object) ['method' => 'getblockcount', 'params' => []];
        return VcashRpc::call_rpc($payload);
    }


    public static function rpc_getdifficulty() {
        # getdifficulty
        $payload = (object) ['method' => 'getdifficulty', 'params' => []];
        return VcashRpc::call_rpc($payload);
    }


    public static function rpc_validateaddress($address) {
        # validateaddress address
        $payload = (object) ['method' => 'validateaddress', 'params' => [$address]];
        return VcashRpc::call_rpc($payload);
    }


    public static function rpc_sendtoaddress($address, $amount) {
        // WARNING: USE WITH CAUTION
        # sendtoaddress address, amount
        $payload = (object) ['method' => 'sendtoaddress', 'params' => [$address, $amount]];
        return VcashRpc::call_rpc($payload);
    }


    public static function check_received($address) {
        // Check if address has received funds from user
        // address is generated by rpc_getnewaddress() (New empty address)
        // Triple check: listreceivedbyaddress, listtransactions, gettransaction
        $amount = 0;
        $user_address = null;
        // Check if $address has received funds in recent transaction
        // parse listreceivedbyaddress look for $address
        $response = VcashRpc::rpc_listreceivedbyaddress();
        foreach ($response['result'] as $received) {
            if ($received['address'] == $address) {
                // Searched address found
                // Do stuff
                $amount = $received['amount'];
            }
        }

        // Parse listtransactions
        if ($amount > 0) {
            // Recheck the transaction and get user address.
            // After the check we will have all needed data (house_address, user_address, bet_amount)
            $response = VcashRpc::rpc_listtransactions();
            foreach ($response['result'] as $trans) {
                if ($trans['address'] == $address) {
                    $txid = $trans['txid'];
                    $txdata = VcashRpc::rpc_gettransaction($txid);
                    $user_address = $txdata['result']['vout'][0]['scriptPubKey']['addresses'][0];
                }
            }
        }

        $data = array("house_address"=>$address, "user_address"=>$user_address ,"amount"=>$amount);
        return $data;
    }
}
